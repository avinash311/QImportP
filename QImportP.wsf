<?XML version="1.0"?>
<package>
<job id="QImportP">
<?job error="true" debug="true"?>
<resource id="version">
    1.0, 2017-08-18
</resource>
<resource id="homepage">
    http://www.aczoom.com/tech/import-prices-script-for-quicken/
</resource>
<resource id="copyright">
    Copyright (c) 2009,2015,2017 ACZoom.com
	Amendments to use Screen Scrape Copyright 2017 (c) 2017 Adrian Talbot
    No Rights Reserved.
    Placed into Public Domain.
    May have calls into external web APIs, which will have 
    their own terms of use.
</resource>

<runtime>
    <description>This Windows JScript program:
      1) gets current and historical quotes from Google Finance web screens
         and creates a .csv file of prices for import into quicken
    and if /automate is specified as an argument:
      2) starts Quicken (if not already started),
      3) sends keys to import the prices using Quicken's Import Prices command.
      If Quicken file is protected with Password, the automation will not work
      unless Quicken is started and the password entered before running
      this script.

    Downloaded prices are stored in file QImportP.csv, in the directory
     to be replaced with %TMP% or %TEMP%, or C:\WINDOWS\TEMP, whichever setting is found first.

    </description>
    <named name = "automate"
        helpstring = "Start Quicken and import prices into Quicken"
        type = "simple" required = "false"/>
    <named name = "days"
        helpstring = "Get historical quotes for these many number of days (default 0 = current prices only)"
        type = "string" required = "false"/>
    <named name = "s"
        helpstring = "List of comma-separated symbols for pricing (Format [!][exchange:]SYM)"
        type = "string" required = "true"/>
    <named name = "v"
        helpstring = "verbosity of messages; 0=ERROR,1=WARNING+ERROR, 2=INFO+WARNNG+ERROR. 3=DEBUG+INFO+WARNING+ERROR"
        type = "string" required = "false"/>
    <named name = "dmy"
        helpstring = "Use specified format for date(Default=mm/dd/yy)"
        type = "simple" required = "false"/>
    <named name = "div"
        helpstring = "Divide amounts by value, use /div:100 for converting pence into pounds"
        type = "string" required = "false"/>
	<named name = "symonly"
        helpstring = "output only the symbol excluding exchange (eg. LON:FDI outputs FDI)"
        type = "simple" required = "false"/>
	<named name = "help"
        helpstring = "/? or /h or /help - Print usage description"
        type = "simple" required = "false"/>
    <example>   Example: cscript QImportP.wsf /s:"C,FMAGX" /automate</example>
</runtime>

<object id="WSH" progid="WScript.Shell"/>
<object id="FSO" progid="Scripting.FileSystemObject"/>
<script language="JScript">
<![CDATA[
/*
 * wsh jscript code to pull down current and historical quotes
 * input: a list of symbols (stock, mutual funds, etc)
 *        number of days to get quotes (in the past, 0 = current day)
 * output: a file named QImportP.csv with prices that can be imported
 *         into Quicken 2004, 2005, 2006 and possibly other versions.
 *         File contains historical closing prices, and latest quotes.
 *         Each line has quicken format:    symbol,price,mm/dd/yyyy
 * Quicken Import Prices only loads price - cannot load low/high/volume
 *
 */

//-------------------------------------------------------
// CONSTANTS
var TODAY = new Date();
//var JVER = Number(ScriptEngineMajorVersion() + "." + ScriptEngineMinorVersion()); // is 5.7 on Windows XP
//var REGISTRY_KEY = "HKCU\\Software\\ACPlace.Net\\QImportP"; // root key
var HTTP_STATUS_OK = 200;
//-------------------------------------------------------
// INPUT parameters
// command line values override these defaults
// symbols: list of symbols, comma-separated
var MESSAGE_LEVEL = 0; // 0,1,2,3... verbosity, debug levels
var ERROR_LEVEL = 0, WARNING_LEVEL = 1, INFO_LEVEL = 2,  DEBUG_LEVEL = 3;

var SYMBOLS_DEFAULT = 'c,FMAGX';
// numdays: how many days in past - should be 1 or greater for historical data
var NUMDAYS_DEFAULT = 0;
var QEXE_DEFAULT = Array(
        "%ProgramFiles%\\Quicken\\qw.exe", // Windows XP, Vista 64/32, all.
        "%ProgramFiles(x86)%\\Quicken\\qw.exe", // Vista-32
        "%ProgramW6432%\\Quicken\\qw.exe" // Vista-64
        // "c:\\Program Files\\Quicken\\qw.exe", // Windows XP or Vista 32
        // "c:\\Program Files (x86)\\Quicken\\qw.exe", // Vista-64
        );
var QTITLE = 'Quicken'; // Quicken App Window Title - prefix
var OUT_FILENAME = 'QImportP.csv';
var DATE_FORMAT = "M/D/Y";
var DIV_NUM = 0; // amounts are divided by this (if non-zero), useful for handling some UK funds


//-------------------------------------------------------
// OBJECTS - UrlHist and UrlCurr
//
// UrlHist - for getting historical prices, for a specified number of days
// Url is composed of joining components of urlHist.
function UrlHist(numdays)
    {
    // Eg. for google = 
    //    https://www.google.com/finance/historical?q=LON&num=7
    
    this.base = "https://www.google.com/finance/historical?q=";
    this.num = "&num=";
    
    this.toUrl = function (symb)
        {
		// remove any leading ! which is the flag to ignore /div: option
		if (symb.charAt(0)=="!")
		    symb = symb.substr(1);
		
        // use this to get url for a specific symbol
        return this.base + symb + this.num + numdays;
        };
		
    this.toQuicken = function (histDate, histPrice, symb)
        { 
		// output is symb,date,price
		
		// symb leading with ! means ignore "/div" option
		var dodiv = (DIV_NUM > 0);
		if (symb.charAt(0) == "!")
			{
			dodiv = false;
		    symb = symb.substr(1);
			}
			
		if (dodiv)
		    {
			histPrice = Math.round(parseFloat(histPrice)/DIV_NUM * 10000)/10000;
			}
			
		// if SYMONLY, want to output symbol excluding market
		if (SYMONLY)
			 symb = symb.substr(symb.indexOf(":")+1);

		
		// DATE_FORMAT = parameter or default D/M/Y (eg. D/M/Y or M-D-Y) need to replace D with Day, M with Month, Y with year
		var myDateOut = DATE_FORMAT;
		var myDate = new Date(histDate);
		myDateOut = myDateOut.replace("D",trunc2(myDate.getDate()));
		myDateOut = myDateOut.replace("M",trunc2(myDate.getMonth()+1));
		myDateOut = myDateOut.replace("Y",myDate.getFullYear());
		return symb + ',' + myDateOut + ',' + histPrice;
					
		};
		
	this.getPriceDate = function (ResponseText,AllPrices,AllDates)
		{
		// setup domain parsor to process xml data
		var myDom = new ActiveXObject("MSXML2.DOMDocument.3.0");
		myDom.async=false;
		myDom.resolveExternals=false;
		
		//var AllPrices = [];
		//var AllDates = [];
		 
		 try  // regex may return error if no matches so catch any to avoid script abort
			{
			var webHtml = ResponseText.replace(/(?:\r\n|\r|\n|\\n|")/g, "");  // replace lf, cr, "\n" and "(quote) with nothing
			
			// First get the google provided symbol name from the "meta Description block" because user data may not have the market prefix
	        //  and there is specific action if the symbol is for a mutual fund (MUTF (including MUTF_GB etc))
			var descrBlock = webHtml.match(/<meta name=Description.+?>/)[0];  // meta Description line contains market:symbol
			var webMktSymb = descrBlock.match(/\(.+\)/)[0];  // market:sybmol is surrounded by (....)
			var webMktSymb = webMktSymb.replace(/\(|\)/g,"");  // remove the brackets
			var webMarket = webMktSymb.substr(0,webMktSymb.indexOf(":"));  // part before the ":"
			var webSymb = webMktSymb.substr(webMktSymb.indexOf(":")+1);     // part after the ":"
				
			// the prices table we are interested is has class="gf-table historical_price"
			var priceDiv = webHtml.match(/<table class\=\gf-table historical_price.+\/table>/)[0];
				
			// we have a sort of table now ... but there are no </th> </td> and </tr> tags - shame on you google
			// lets quickly correct that
			// I'm only interested in <td> tags so lets extract them
			var priceDiv = priceDiv.match(/<td.*</g)[0];
			// now to add the </td> tags
			var tableData = priceDiv.replace(/<td/g,"</td><td"); // add a </td> block in front of all <td>
			var tableData = tableData.replace("</td>","");  // remove first </td> created above
			// append the final /td> tags
			var tableData = tableData + "/td>";
			// remove any <tr> tags
			var tableData = tableData.replace(/<tr>/g,"");
			// finally remove all " class="...." 
			var tableData = tableData.replace(/ (class=).+?>/g,">");   
			// now tableData should be correctly formatted xml so I can use dom to extract the values
				
			// so we load these into the dom parsor
			myDom.loadXML("<table>"+tableData+"</table>");
			var myPrices = myDom.getElementsByTagName("td");
			if (myPrices.length == 0)
			    message("Error: No historic prices found - Table Format error?",ERROR_LEVEL);
						
			// For normal stock;		
			// the data is in groups of 6
			// date, open, high, low, close, volume
			// so array values [0]-[5] = 1st 
			//                 [6]-[11] = 2nd
			// For MUTF (including MUTF_GB etc);
			// the data is in groups of 2
			// date,price
			// so array values [0]-[1] = 1st 
			//                 [2]-[3] = 2nd
			if (webMarket.indexOf("MUTF") >= 0 )
				{
				for (i=0;i<myPrices.length - 1;i+=2)
					{
					// interested in myPrices[i].text = date
					//           and ,myPrices[i+1].text = price
				
					// remove thousands seperator
					currPrice = myPrices[i+1].text.replace(",","");
					AllPrices.push(currPrice);
					AllDates.push(myPrices[i].text);
					}
				}
			  else
				{
				for (i=0;i<myPrices.length - 5;i+=6)
					{				
					// interested in myPrices[i].text = date
					//           and ,myPrices[i+4].text = close price
				
					// remove thousands seperator
					currPrice = myPrices[i+4].text.replace(",","");
					AllPrices.push(currPrice);
					AllDates.push(myPrices[i].text);
					}
			    }		
			}
		catch(err)
			{
			message("Warn: Cannot find match/replace in getPriceDate() "+err.message,WARNING_LEVEL);
			return false;
			}
		return true;
		}
					
	};

//---------------------------------------------------------------------
// urlCurrent - for getting current prices
function UrlCurr()
	{
    this.base = "https://www.google.com/finance?q=";
 
    this.toUrl = function (symb)
    	{
		// remove any leading ! which is the flag to ignore "/div"
		if (symb.charAt(0)=="!")
		    symb = symb.substr(1);
			
        return this.base + symb;
        };
	
    this.toQuicken = function (urlPrice, symb, useDate)
     	{ 
		// output format = symb,curr_date,price
			
		// symb leading with ! means ignore "/div" option
		var dodiv = (DIV_NUM > 0);
		if (symb.charAt(0)=="!")
			{
			dodiv = false;
		    symb = symb.substr(1);
			}
		
        if (dodiv)
		   urlPrice = Math.round(parseFloat(urlPrice)/DIV_NUM * 10000)/10000;
		   
		// if SYMONLY, want to output symbol excluding market
		if (SYMONLY)
			 symb = symb.substr(symb.indexOf(":")+1);
   
    // date_format = parameter or default D/M/Y (eg. D/M/Y or M-D-Y) need to replace D with Day, M with Month, Y with year
    var myDateOut = DATE_FORMAT;
	myDateOut = myDateOut.replace("D",trunc2(useDate.getDate()));
	myDateOut = myDateOut.replace("M",trunc2(useDate.getMonth()+1));
	myDateOut = myDateOut.replace("Y",useDate.getFullYear());
	
	return symb + ',' + myDateOut + ',' + urlPrice;
        
        };
		
    this.getPrice = function (ResponseText)
	    {
		try 
			{
			// make it easier to identify the html fields
			var webHtml = ResponseText.replace(/(?:\r\n|\r|\n|\\n|"|,)/g, "");  // replace lf, cr, "\n" and "(quote) with nothing
			
			var priceBlock = webHtml.match(/<span class=pr.+?<\/span>/)[0]; 
			
			// get the price bits
			var currPrice = priceBlock.match(/>\d+.+?</)[0];  // gets number between ">" and "<" 
			
			// remove the leading/trailing "<" and ">"
			currPrice = currPrice.replace(/[<|>]/g,"");		
			}
		catch(err)
			{
			message("WARN: Cannot find current price in getPrice() "+err.message,WARNING_LEVEL)
			return 0;
			}
			
		if (!currPrice)
			{
			message("WARN: current price not found!",WARNING_LEVEL)
			return 0;
			}
	
        return currPrice;
		}
		
	this.getDate = function (ResponseText)
	    {
		// if market is MUTF type or the market is "Closed" then need to return the date specified within html
		//  otherwise use the current date.
		
		// make it easier to identify the html fields
		var webHtml = ResponseText.replace(/(?:\r\n|\r|\n|\\n|"|,)/g, "");  // replace lf, cr, "\n" and "(quote) with nothing
		
        var useDate = new Date();  // Default current date is today
		
	    // First get the google provided symbol name from the "meta Description block" because user data may not have the market prefix
	    //  and there is specific action if the symbol is for a mutual fund (MUTF (including MUTF_GB etc))
			var descrBlock = webHtml.match(/<meta name=Description.+?>/)[0];  // meta Description line contains market:symbol
			var webMktSymb = descrBlock.match(/\(.+\)/)[0];  // market:sybmol is surrounded by (....)
			var webMktSymb = webMktSymb.replace(/\(|\)/g,"");  // remove the brackets
			var webMarket = webMktSymb.substr(0,webMktSymb.indexOf(":"));  // part before the ":"
			var webSymb = webMktSymb.substr(webMktSymb.indexOf(":")+1);     // part after the ":"

		// lets see if there is a date on the screen which we need to use
		// MUTF type doesn't update until market close so last update date is on the screen
		// for normal stock, if the market has closed the date to use is on the screen
		var screenDate = "";
		if ( webMarket.indexOf("MUTF") >= 0 )
			{
			var dateMUTF = webHtml.match(/<span class=datetime sfe.+?<\/span>/)[0];
			screenDate = dateMUTF.match(/>.+? \d+/)[0];
			screenDate = screenDate.replace(">","");   // remove ">" leaving date without year
			}
		 else
			{
			var marketClosed = webHtml.match(/<span class=nwp.+?<\/span>/)[0];
			if ( marketClosed.indexOf("Close") >= 0 )
			   {
			   // we have <span class=nwp>Aug 11 - Close</span>
               screenDate = marketClosed.match(/>.+? \d+/)[0];
			   screenDate = screenDate.replace(">","");   // remove ">" leaving date without year
			   }
			}
			
		// if we found a date on the screen, it does not contain the year (eg. "Aug 13")	
	    if ( screenDate != "" )
			{
			// Assume current year unless it is January and the screen date is Dec
			if (useDate.getMonth() == 0 && ScreenDate.substr(0,3) == "Dec")  // getMonth() starts at 0
				var screenYear = useDate.getFullYear()-1; // currently Jan and Screen is Dec so use prev year
			 else
				var screenYear = useDate.getFullYear();   // use current year

			useDate = new Date(screenDate+", "+screenYear);   
			}
						
		return useDate;	
		}

	}

//---------------------------------------------------------------------
// get all input parameters
// NUMDAYS, SYMBOLS...

var argsNamed = WScript.Arguments.Named;
MESSAGE_LEVEL = getArgVal('v', argsNamed, 0); // 0,1,2,3... verbosity levels

message("TODAY = " + TODAY.toDateString(), INFO_LEVEL);

if (getArgVal('?', argsNamed, false)
        || getArgVal('h', argsNamed, false)
        || getArgVal('help', argsNamed, false))
	{
    WScript.Arguments.ShowUsage();
    WScript.Quit();
	}

// for UK processing, /div:100 and /dmy may be present
DIV_NUM = getArgVal('div', argsNamed, 0);
DATE_FORMAT = getArgVal('dmy', argsNamed, DATE_FORMAT);

// Option to exclude exchange in output (eg. LON:FDI -> FDI)
var SYMONLY = getArgVal('symonly', argsNamed, false); 

// setup output file
var outFilePath = getTempDir() + "\\" + OUT_FILENAME;
message("Output file name = " + outFilePath, INFO_LEVEL);

// get symbols and other parameters
var symbols = getArgVal('s', argsNamed, SYMBOLS_DEFAULT);
var numDays = getArgVal('days', argsNamed, NUMDAYS_DEFAULT);
var automate = getArgVal('automate', argsNamed, false);

try  // open outut file and catch error, for example file already in use
  {
	// setup output file and write first line for quicken identification
    var outFile = FSO.CreateTextFile(outFilePath);
    outFile.Writeline("!Type:Prices");
   }
  catch(err)
   {
    message("Error: File "+outFilePath+" - "+err.message,ERROR_LEVEL);
   }

if (outFile)
    {   
	if (getPrices(symbols, numDays, outFilePath))
    	{
		// done with file and http
        outFile.Writeline("^"); 
        outFile.Close();
		if (automate)
			{
			message("doAutomation",DEBUG_LEVEL);
			doAutomation(outFilePath)
			}
		}
	}

message("QImportP: Done with script.", DEBUG_LEVEL);
WScript.Quit(); 

//---------------------------------------------------------------------
// get both historical and current prices for given list of symbols,
// depending on input args.
function getPrices(symbols, numDays, outFilePath)
    {
    message("Start getPrices",ERROR_LEVEL);
	
    var error = false;

    // setup HTTP connections, with appropriate timeouts
    var WinHttpReq = new ActiveXObject("WinHttp.WinHttpRequest.5.1");
    WinHttpReq.SetTimeouts(30000, 30000, 30000, 30000)
	
	// setup domain parsor to process xml data
	//var myDom = new ActiveXObject("MSXML2.DOMDocument.3.0");
	//myDom.async=false;
	//myDom.resolveExternals=false;
	
	// setup current and hist url's
	var urlcurr = new UrlCurr();
    var urlhist = new UrlHist( numDays );

		
	// for each symbol, get current then historical price
	var symbols_array = [];
	symbols_array = symbols.split(",");
	for (i in symbols_array) 
	    { 
		 var sym = symbols_array[i];
		 message("Info: Current Price Treatment for symbol=" + sym, INFO_LEVEL);

		// current price for sym
		var url = urlcurr.toUrl(sym);
		WinHttpReq.Open("GET", url, false);
		WinHttpReq.Send();
		if (WinHttpReq.Status == HTTP_STATUS_OK) 
			{
			 currPrice = urlcurr.getPrice(WinHttpReq.ResponseText);
			 useDate = urlcurr.getDate(WinHttpReq.ResponseText);
			 if (currPrice > 0 && typeof useDate != "undefined") // AJT ** And useDate is set correctly ?!
			     {
				 var out = urlcurr.toQuicken(currPrice, sym, useDate); 
			     if (out)
					{
					outFile.WriteLine(out);
					}
				 }
			   else
			     {
				 message("Warn: No current price for symbol "+sym,WARNING_LEVEL);
				 }
			}
		else
			{
			//error = true;
			message("Error: could not retreive latest prices for symbol="+sym, ERROR_LEVEL);
			message("  Code " + WinHttpReq.Status + " retrieving " + urlcurr.toUrl(), ERROR_LEVEL);
			}
		  
		 // history for current sym next
		 if ( numDays > 0 )
		    {
			message("Info: History Price Treatment for symbol=" + sym, INFO_LEVEL);

			var url = urlhist.toUrl(sym);
			
			//var WinHttpReq = new ActiveXObject("WinHttp.WinHttpRequest.5.1");
            //WinHttpReq.SetTimeouts(30000, 30000, 30000, 30000)
			
			WinHttpReq.Open("GET", url, false);
			WinHttpReq.Send();

			if (WinHttpReq.Status == HTTP_STATUS_OK)  // response code 200
				{
				// scan to see if prices and dates can be found
				
				var AllPrices = [];
				var AllDates = [];
		 		// arrays are passed by reference so adding values within function will really add here too!
				var ret = urlhist.getPriceDate(WinHttpReq.ResponseText,AllPrices,AllDates);
				if (ret)
					{
					// both arrays have equal length
					for (i=0; i < AllPrices.length;i++)
					    {
						var out=urlhist.toQuicken(AllDates[i],AllPrices[i],sym);			
						if (out)
							{
							outFile.WriteLine(out);
							}
						}
					}
				}
			else
				{
				// error, could not retrieve page
				// some errors may be fine - if start date is recent and no
				// closing prices exist for that symbol from that date
				//
				 message("Error: could not retreive historical prices for symbol=" + sym, ERROR_LEVEL);
				 message("  Code " + WinHttpReq.Status + " retrieving " + url, ERROR_LEVEL);
				}
			}
		}				
	
	
	return !error;
    } // getPrices()

//---------------------------------------------------------------------
// Windows automation - start Quicken application, and when it is
// open (after user enters any password, etc), run the Import command
// Quicken does not have Automation capabilities, so have to use
// SendKeys. This is not a very reliable method, depends a lot on timing
// and position of windows on screen, etc. Still, should work most of the
// time.
// TODO - not very reliable using scripting language
// this is better coded in something like C#, which has access
// to functions like FindWindow and can better ensure sendkeys is going
// to the right window.

function doAutomation(outFilePath) {
    // check if Quicken is already up
    var foundApp = appActivate(QTITLE, 2); // check each second, for these many times
    if (!foundApp) {
       // try starting Quicken. this may not be very reliable, and since
       // Quicken may be password protected, there is not much value
       // in starting Quicken here. Better to run Quicken first, and then
       // run this automation to just import the prices.
        var qexe = '';
        for (var i in QEXE_DEFAULT) {
            qexe = WSH.ExpandEnvironmentStrings(QEXE_DEFAULT[i]);
            // (FSO.FileExists(qexe)) - this check not necessary, just call Run
            // Run will start application, or do nothing if app is already running
            try {
                WSH.Run('"' + qexe + '"', 1, false); // true to wait here, false to continue in this script
            } catch (e) {
                // ignore errors from Run, keep trying
                message("automation: could not run Quicken at [" + qexe + "] " + e.description, DEBUG_LEVEL);
                qexe = '';
            }
            if (qexe) {
                // Run had no error, we can exit loop
                break;
            }
        }
        if (!qexe) {
            message("Error: 1: Unable to run Quicken application - may be better to run Quicken first, and then this script", ERROR_LEVEL);
            return false;
        }
        message("automation: started Quicken using: " + qexe, INFO_LEVEL);
        // check if window is up - check a few times, allowing time for app to be up.
        foundApp = appActivate(QTITLE, 20); // check each second, for these many times
    }

    // if password window is displayed, this automation is unlikely to
    // work since timing it is hard/not possible all the time
    // in that case, users should first start Quicken, enter password,
    // and then run this script. It is not possible to pick appropriate
    // number of seconds for this case - don't want to wait 20 secs
    // all the time!
    // WScript.Sleep(20000); // allow for possible password entry? 20 secs!
    if (foundApp) {
        // open portfolio - one of two ways - ^u (not ^U) or %i p
        // alt-i is bad - brings up find menu in register view, so use ^u
        // appSendKeys("%i", QTITLE); // open Investing Menu
        // appSendKeys("p", QTITLE); // select Portfolio command
        appSendKeys("^u", QTITLE); // go to Portfolio window

        appSendKeys("%f", QTITLE); // open file menu
        appSendKeys("i", QTITLE);  // select Import command
        appSendKeys("i", QTITLE);  // select Import Prices command
        // this brings up the "Import Price Data" dialog box
        escapedPath = escapeSendKeys(outFilePath);
        appSendKeys(escapedPath, QTITLE); // enter file name
	    appSendKeys("{ENTER}", QTITLE);   // send file name
        // final OK - this should be sent only after file has been loaded,
        // otherwise it will cause the Cancel button to be clicked!
        // let user click OK, so they can see number of prices imported
        // therefore line below may be commented.
        //appSendKeys("{ENTER}", QTITLE);   // click OK on successful import box
    } else {
        message("Error: 2: Unable to activate Quicken application - not sending keys", ERROR_LEVEL);
        return false;
    }
    return true;
} // doAutomation()

//---------------------------------------------------------------------
// Utility Functions 

//---------------------------------------------------------------------
function appActivate(title, numtimes) {
    var foundApp = false;
    --numtimes;
    for (var i = 0; i <= numtimes && !foundApp; ++i) { // check each second, for these many times
        foundApp = WSH.AppActivate(title);
        if (foundApp || (i >= numtimes)) break;
        WScript.Sleep(1000);
    }
    return foundApp;
}

//--------------------------------------------------------------------- 
function appSendKeys(keys, title) {
    message("SendKeys " + keys, DEBUG_LEVEL);
    if (appActivate(title, 2)) {
        WSH.SendKeys(keys);
        WScript.Sleep(1000);
    } else {
        message("Error: could not send keys" + keys, ERROR_LEVEL);
    }
}

//--------------------------------------------------------------------- 
function escapeSendKeys(str) {
    var out = str;
    out = out.replace(/{/g, "{{}");
    out = out.replace(/~/g, "{~}");
    out = out.replace(/!/g, "{!}");
    out = out.replace(/\^/g, "{^}");
    out = out.replace(/\+/g, "{+}");
    out = out.replace(/ /g, "{SPACE}");
    out = out.replace(/\t/g, "{TAB}");
    if (out != str) {
        message("Escape SendKeys new string" + out, DEBUG_LEVEL);
    }
    return out;
}

//---------------------------------------------------------------------
// check if given argument is present in the args list,
// return true if yes, otherwise return the default value
// if arg has a = following name, then return the value instead
// value provided after = character
function getArgVal(what, args, defVal) {
    var val = defVal; // if not found
    var re = new RegExp("^\/" + what, "i");
    var exists = args.exists(what);
    if (exists) {
        val = true;
        var item = args.item(what);
        if (item) {
            val = item;
        }
    }
    message("getArgVal:  what=" + what + "  val=" + val, DEBUG_LEVEL);
    return val;
}

//---------------------------------------------------------------------
function getTempDir() {
    var t = WSH.ExpandEnvironmentStrings("%TMP%");
    if (!t) t = WSH.ExpandEnvironmentStrings("%TEMP%");
    if (!t) t = 'C:\\WINDOWS\\TEMP';
	
    return t;
}

//---------------------------------------------------------------------
// truncate given number to 2 chars, or prefix with 0 to make it 2 chars
function trunc2(n) {
    var nn = "0"+n;
	return nn.slice(-2);
	
}

//---------------------------------------------------------------------
// print given message if its level is <= MESSAGE_LEVEL setting
// level 0 will always print, 1 will print if DEBUG is 0 or 1, etc
function message(str, level) {
    if (level == 0 || level <= MESSAGE_LEVEL)
        WScript.Echo(str);
}
//---------------------------------------------------------------------
]]>
</script>
</job>
//---------------------------------------------------------------------
<job id="Setup">
<?job error="true"  debug="true"?>
<runtime>
    <description>This is used to Install and Setup the QImportP script.
    TODO
    </description>
    <example>   Example: cscript QImportP.wsf /job:Setup"</example>
</runtime>
<script language="VBScript">
<![CDATA[
'
' SETUP for wsh QImportP jscript/vbscript code
' TODO
'
]]>
</script>
</job>
//---------------------------------------------------------------------
</package>
