<?XML version="1.0"?>
<package>
<job id="QImportP">
<?job error="true" debug="true"?>
<resource id="version">
    1.51, 2017-09-18
</resource>
<resource id="homepage">
    http://www.aczoom.com/tech/import-prices-script-for-quicken/
</resource>
<resource id="copyright">
    Copyright (c) 2009,2015,2017 ACZoom.com
    Amendments to use Screen Scrape Copyright 2017 (c) 2017 Adrian Talbot
    No Rights Reserved.
    Placed into Public Domain.
    May have calls into external web APIs, which will have
    their own terms of use.
</resource>

<runtime>
    <description>This Windows JScript program:
      1) gets current and historical quotes from Google Finance web screens or
         current quotes only from Yahoo Finance API and creates a .csv file of
	 prices for import into quicken
    and if /automate is specified as an argument:
      2) starts Quicken (if not already started),
      3) sends keys to import the prices using Quicken's Import Prices command.
      If Quicken file is protected with Password, the automation will not work
      unless Quicken is started and the password entered before running
      this script.

    Downloaded prices are stored in file QImportP.csv, in the directory
     to be replaced with %TMP% or %TEMP%, or C:\WINDOWS\TEMP, whichever setting is found first.

    </description>
    <named name = "automate"
        helpstring = "Start Quicken and import prices into Quicken"
        type = "simple" required = "false"/>
    <named name = "days"
        helpstring = "Get historical quotes for these many number of days (default 0 = current prices only)"
        type = "string" required = "false"/>
    <named name = "s"
        helpstring = "List of comma-separated symbols for pricing (Format [!][exchange:]SYM)"
        type = "string" required = "true"/>
    <named name = "v"
        helpstring = "verbosity of messages; 0=ERROR,1=WARNING+ERROR, 2=INFO+WARNNG+ERROR. 3=DEBUG+INFO+WARNING+ERROR"
        type = "string" required = "false"/>
    <named name = "dmy"
        helpstring = "Use specified format for date. Ex: M/D/Y (default) or D/M/Y, etc using D, M, Y letters.)"
        type = "simple" required = "false"/>
    <named name = "div"
        helpstring = "Divide amounts by value, use /div:100 for converting pence into pounds"
        type = "string" required = "false"/>
    <named name = "symonly"
        helpstring = "output only the symbol excluding exchange (eg. LON:FDI outputs FDI)"
        type = "simple" required = "false"/>
    <named name = "yahoo"
        helpstring = "Use Yahoo quotes service. This supports current prices only, no historical quotes."
        type = "string" required = "false"/>
    <named name = "help"
        helpstring = "/? or /h or /help - Print usage description"
        type = "simple" required = "false"/>
    <example>   Example: cscript QImportP.wsf /s:"C,FMAGX" /automate</example>
</runtime>

<object id="WSH" progid="WScript.Shell"/>
<object id="FSO" progid="Scripting.FileSystemObject"/>
<script language="JScript">
<![CDATA[
/*
 * wsh jscript code to pull down current and historical quotes
 * input: a list of symbols (stock, mutual funds, etc)
 *        number of days to get quotes (in the past, 0 = current day)
 * output: a file named QImportP.csv with prices that can be imported
 *         into Quicken 2004, 2005, 2006 and possibly other versions.
 *         File contains historical closing prices, and latest quotes.
 *         Each line has quicken format:    symbol,price,mm/dd/yyyy
 * Quicken Import Prices only loads price - cannot load low/high/volume
 *
 */

//-------------------------------------------------------
// CONSTANTS
var TODAY = new Date();
//var JVER = Number(ScriptEngineMajorVersion() + "." + ScriptEngineMinorVersion()); // is 5.7 on Windows XP
var HTTP_STATUS_OK = 200;
//-------------------------------------------------------
// INPUT parameters
// command line values override these defaults
// symbols: list of symbols, comma-separated
var MESSAGE_LEVEL = 0; // 0,1,2,3... verbosity, debug levels
var ERROR_LEVEL = 0, WARNING_LEVEL = 1, INFO_LEVEL = 2,  DEBUG_LEVEL = 3;

var SYMBOLS_DEFAULT = 'C,FMAGX';
// numdays: how many days in past - should be 1 or greater for historical data
var NUMDAYS_DEFAULT = 0;
var QEXE_DEFAULT = Array(
        "%ProgramFiles%\\Quicken\\qw.exe", // Windows XP, Vista 64/32, all.
        "%ProgramFiles(x86)%\\Quicken\\qw.exe", // Vista-32 or newer
        "%ProgramW6432%\\Quicken\\qw.exe" // Vista-64 or newer
        // "c:\\Program Files\\Quicken\\qw.exe", // Windows XP or Vista 32
        // "c:\\Program Files (x86)\\Quicken\\qw.exe", // Vista-64
        );
var QTITLE = 'Quicken'; // Quicken App Window Title - prefix
var OUT_FILENAME = 'QImportP.csv';
var DATE_FORMAT = "M/D/Y";
var DIV_NUM = 0; // amounts are divided by this (if non-zero), useful for handling some UK funds


//-------------------------------------------------------
// OBJECTS - UrlHist and UrlCurr, using Google API for the quotes
//
// UrlHist - for getting historical prices, for a specified number of days
// Url is composed of joining components of urlHist.
function UrlHistFromGoogle(numdays)
    {
    // Eg. for google =
    //    https://www.google.com/finance/historical?q=LON&num=7

    this.base = "https://www.google.com/finance/historical?q=";
    this.num = "&num=";

    this.toUrl = function (symb)
        {
        // remove any leading ! which is the flag to ignore /div: option
        if (symb.charAt(0)=="!")
            symb = symb.substr(1);

        // use this to get url for a specific symbol
        return this.base + symb + this.num + numdays;
        };

    this.toQuicken = function (histDate, histPrice, symb)
        {
        // output is symb,date,price

        // symb leading with ! means ignore "/div" option
        var dodiv = (DIV_NUM > 0);
        if (symb.charAt(0) == "!")
            {
            dodiv = false;
            symb = symb.substr(1);
            }

        if (dodiv)
            {
            histPrice = Math.round(parseFloat(histPrice)/DIV_NUM * 10000)/10000;
            }

        // if SYMONLY, want to output symbol excluding market
        if (SYMONLY)
             symb = symb.substr(symb.indexOf(":")+1);


        // DATE_FORMAT = parameter or default M/D/Y (eg. D/M/Y or M-D-Y) need to replace D with Day, M with Month, Y with year
        var myDateOut = DATE_FORMAT;
        var myDate = new Date(histDate);
        myDateOut = myDateOut.replace("D",trunc2(myDate.getDate()));
        myDateOut = myDateOut.replace("M",trunc2(myDate.getMonth()+1));
        myDateOut = myDateOut.replace("Y",myDate.getFullYear());
        return symb + ',' + myDateOut + ',' + histPrice;

        };

    this.getPriceDate = function (ResponseText,AllPrices,AllDates)
        {
        // setup domain parsor to process xml data
        var myDom = new ActiveXObject("MSXML2.DOMDocument.3.0");
        myDom.async=false;
        myDom.resolveExternals=false;

        //var AllPrices = [];
        //var AllDates = [];

         try  // regex may return error if no matches so catch any to avoid script abort
            {
            var webHtml = ResponseText.replace(/(?:\r\n|\r|\n|\\n|")/g, "");  // replace lf, cr, "\n" and "(quote) with nothing

            // First get the google provided symbol name from the "meta Description block" because user data may not have the market prefix
            //  and there is specific action if the symbol is for a mutual fund (MUTF (including MUTF_GB etc))
            var descrBlock = webHtml.match(/<meta name=Description.+?>/);   // market:symbol is contained within meta description
            if (descrBlock == null)
                {
                message("Warn: No descrBlock returned",WARNING_LEVEL);
                return false;
                }
            descrBlock = descrBlock[0];

            var webMktSymb = descrBlock.match(/\(.+\)/);  // market:sybmol is surrounded by (....)
            // if nothing found in brackets, chances are user supplied invalid symbol
            if (webMktSymb == null)
                {
                message("Warn: Symbol not found in Google history",WARNING_LEVEL);
                return false;
                }

            webMktSymb = webMktSymb[0];
            var webMktSymb = webMktSymb.replace(/\(|\)/g,"");  // remove the brackets
            var webMarket = webMktSymb.substr(0,webMktSymb.indexOf(":"));  // part before the ":"
            var webSymb = webMktSymb.substr(webMktSymb.indexOf(":")+1);     // part after the ":"

            // the prices table we are interested is has class="gf-table historical_price"
            var priceDiv = webHtml.match(/<table class\=\gf-table historical_price.+\/table>/);
            if ( priceDiv == null )
               {
               message("Error: scrape for \"gf-table historical_price\" - check script",ERROR_LEVEL);
               return false;
               }
            priceDiv = priceDiv[0];

            // we have a sort of table now ... but there are no </th> </td> and </tr> tags - shame on you google
            // lets quickly correct that
            // I'm only interested in <td> tags so lets extract them
            var priceDiv = priceDiv.match(/<td.*</g);
            if ( priceDiv == null )
               {
               message("Error: priceDiv contains no \"<td>\" - check script",ERROR_LEVEL);
               return false;
               }
            priceDiv = priceDiv[0];

            // now to add the </td> tags
            var tableData = priceDiv.replace(/<td/g,"</td><td"); // add a </td> block in front of all <td>
            var tableData = tableData.replace("</td>","");  // remove first </td> created above
            // append the final /td> tags
            var tableData = tableData + "/td>";
            // remove any <tr> tags
            var tableData = tableData.replace(/<tr>/g,"");
            // finally remove all " class="...."
            var tableData = tableData.replace(/ (class=).+?>/g,">");
            // now tableData should be correctly formatted xml so I can use dom to extract the values

            // so we load these into the dom parsor
            myDom.loadXML("<table>"+tableData+"</table>");
            var myPrices = myDom.getElementsByTagName("td");

            if (myPrices.length == 0)
                message("Error: No historic prices found - Table Format error?",ERROR_LEVEL);

            // For normal stock;
            // the data is in groups of 6
            // date, open, high, low, close, volume
            // so array values [0]-[5] = 1st
            //                 [6]-[11] = 2nd
            // For MUTF (including MUTF_GB etc);
            // the data is in groups of 2
            // date,price
            // so array values [0]-[1] = 1st
            //                 [2]-[3] = 2nd
            if (webMarket.indexOf("MUTF") >= 0 )
                {
                for (i=0;i<myPrices.length - 1;i+=2)
                    {
                    // interested in myPrices[i].text = date
                    //           and ,myPrices[i+1].text = price

                    // remove thousands seperator
                    currPrice = myPrices[i+1].text.replace(",","");
                    AllPrices.push(currPrice);
                    AllDates.push(myPrices[i].text);
                    }
                }
              else
                {
                for (i=0;i<myPrices.length - 5;i+=6)
                    {
                    // interested in myPrices[i].text = date
                    //           and ,myPrices[i+4].text = close price

                    // remove thousands seperator
                    currPrice = myPrices[i+4].text.replace(",","");
                    AllPrices.push(currPrice);
                    AllDates.push(myPrices[i].text);
                    }
                }
            }
        catch(err)
            {
            message("Warn: Cannot find match/replace in getPriceDate() "+err.message,WARNING_LEVEL)
            return false;
            }
        return true;
        }

    };

//---------------------------------------------------------------------
// urlCurrent - for getting current prices, using Google API
function UrlCurrFromGoogle()
    {
    this.base = "https://www.google.com/finance?q=";

    this.toUrl = function (symb)
        {
        // remove any leading ! which is the flag to ignore "/div"
        if (symb.charAt(0)=="!")
            symb = symb.substr(1);

        return this.base + symb;
        };

    this.toQuicken = function (urlPrice, symb, useDate)
         {
        // output format = symb,curr_date,price

        // symb leading with ! means ignore "/div" option
        var dodiv = (DIV_NUM > 0);
        if (symb.charAt(0)=="!")
            {
            dodiv = false;
            symb = symb.substr(1);
            }

        if (dodiv)
           urlPrice = Math.round(parseFloat(urlPrice)/DIV_NUM * 10000)/10000;

        // if SYMONLY, want to output symbol excluding market
        if (SYMONLY)
             symb = symb.substr(symb.indexOf(":")+1);

    // date_format = parameter or default D/M/Y (eg. D/M/Y or M-D-Y) need to replace D with Day, M with Month, Y with year
    var myDateOut = DATE_FORMAT;
    myDateOut = myDateOut.replace("D",trunc2(useDate.getDate()));
    myDateOut = myDateOut.replace("M",trunc2(useDate.getMonth()+1));
    myDateOut = myDateOut.replace("Y",useDate.getFullYear());

    return symb + ',' + myDateOut + ',' + urlPrice;

        };

    this.getPrice = function (ResponseText)
        { // find and return the latest price
        try
            {
            // make it easier to identify the html fields
            var webHtml = ResponseText.replace(/(?:\r\n|\r|\n|\\n|"|,)/g, "");  // replace lf, cr, "\n" and "(quote) with nothing

            // all current/latest price, date etc:- are stored in the html <div id=sharebox-data>......</div>
            var shareBox = webHtml.match(/<div id=sharebox-data.+?<\/div>/);
            if (shareBox == null)  // not found = ambiguous stock symbol or symbol not found (or google changed format!)
                {
                message("Error: Price find symbol not found - check on www.google.com/finance",ERROR_LEVEL);
                return 0;
                }
            shareBox = shareBox[0];

            // The price is withing the sharebox data, within <meta itemprop="price" content="99.99" />
            var itemPropPrice = shareBox.match(/itemprop=price .+?\/>/);
            if (itemPropPrice == null )
                {
                message("Error: \"<meta itemprop=price\" not found - check script",ERROR_LEVEL);
                return 0;
                }
            itemPropPrice = itemPropPrice[0];

            // get the content= ... upto and including space
            var propPriceContent = itemPropPrice.match(/content=\d+.+? /);
            if (propPriceContent == null )
                {
                message("Error: \"content=\" price value not found - check script",ERROR_LEVEL);
                return 0;
                }
            propPriceContent = propPriceContent[0];

            // Remove the text from the number including trailing space
            propPriceContent = propPriceContent.replace("content=","");
            propPriceContent = propPriceContent.replace(" ","");

            }
        catch(err)
            {
            message("Error: Cannot find current price in getPrice() "+err.message,ERROR_LEVEL)
            return 0;
            }

        return propPriceContent;
        }

    this.getDate = function (ResponseText)
        { // find and return the date for price ... not always the current date because the market could be closed
        try
            {
            var useDate = TODAY;

            // make it easier to identify the html fields
            var webHtml = ResponseText.replace(/(?:\r\n|\r|\n|\\n|"|,)/g, "");  // replace lf, cr, "\n" and "(quote) with nothing

            // all current/latest price, date etc:- are stored in the html <div id=sharebox-data>......</div>
            var shareBox = webHtml.match(/<div id=sharebox-data.+?<\/div>/);
            if (shareBox == null)  // not found = ambiguous stock symbol or symbol not found (or google changed format!)
                {
                message("Error: Date find symbol not found - check on www.google.com/finance",ERROR_LEVEL);
                return 0;
                }
            shareBox = shareBox[0];

            // The date is withing the sharebox data, within <meta itemprop="quoteTime" content="yyyy-mm-ddThh:mm:ssZ" />
            var itemPropDate = shareBox.match(/itemprop=quoteTime .+?\/>/);
            if (itemPropDate == null )
                {
                message("Error: \"<meta itemprop=quoteTime\" not found - check script",ERROR_LEVEL);
                return 0;
                }
            itemPropDate = itemPropDate[0];

            // get the content= ... upto and including space
            var propDateContent = itemPropDate.match(/content=\d+.+? /);
            if (propDateContent == null )
                {
                message("Error: \"content=\" date value not found - check script",ERROR_LEVEL);
                return 0;
                }
            propDateContent = propDateContent[0];

            // Remove the text from the number including trailing space
            propDateContent = propDateContent.replace("content=","");
            propDateContent = propDateContent.replace(" ","");

            // create date in this way to avoid confuson with diffent jscript locales
            useDate = new Date(propDateContent.substr(0,4),propDateContent.substr(5,2)-1,propDateContent.substr(8,2));
            }
        catch(err)
            {
            message("Error: Cannot find date for current price in getDate() "+err.message,ERROR_LEVEL)
            }

        return useDate;
        }

    }

// --------------------------------------------------------------------------------------------------
// OBJECTS - UrlCurrFromYahoo
// for getting current (last business day) prices from Yahoo API
// gets data like this - note that some dates may be today, some in past!
// "C",1.02,"3/5/2009",1.11,0.97,563658432
// "VIGRX",17.63,"3/4/2009",N/A,N/A,N/A
//  This was done because Yahoo is much faster since it returns just the quotes,
//  and it is more current (0-1 days old) vs Google (1-2 days old). Example:
//  http://download.finance.yahoo.com/d/quotes.csv?f=sl1d1hgv&e=.csv&s=VTSAX
//  vs
//  https://www.google.com/finance?q=VTSAX
//  Try those after couple of hours after market close, around 7PM using Mutual
//  Fund symbols - Google quoted prices are much older than Yahoo quotes.

function UrlCurrFromYahoo(ss) {
    this.originalSymbols = ss;
    // Remove any ! in the string, !<sym> is used to avoid DIV_NUM on the price
    var re = /!/g;
    var symbols = ss.replace(re, "");
    this.url = "http://download.finance.yahoo.com/d/quotes.csv?f=sl1d1hgv&e=.csv&s=" + symbols;
    this.toUrl = function () {
        return this.url;
    };
    this.toQuicken = function (line) { // from given yahoo data line, create quicken suitable import line

        // given an current prices data line from Yahoo, convert it to a
        // Quicken import file line - which is just symbol,date,price
        var items = line.split(",",6);
        var ret = "";
        if (items[0] && items[1] && items[2]) {
            // items[1] may be in pence and imports are in pounds, UK issue
            // May be used for other conversions too - exchange rate, for example.
	    // Skip this division if the symbol was prefixed with ! in the input.
	    var skipRe = new RegExp("!" + items[0] + "\\b");
            if (DIV_NUM > 0 && !skipRe.test(this.originalSymbols)) {
                // The * 10000)/10000 is to get upto 4 decimal places precision
                items[1] = Math.round(parseFloat(items[1])/DIV_NUM * 10000)/10000;
            }
            // the date format returned is "M/dd/yyyy" with quotes
            // so here's an extra process which allows easy switch
            // between month and day, needed for non-US processing
            var ymd = items[2].replace(/\"/g,"");
            ymd = ymd.split("/", 3);
            if (ymd.length == 3) {
                if (DATE_FORMAT == "D/M/Y") {
                    ret = "" + items[0] + ", " + items[1] + ", " + ymd[1] + "/" + ymd[0] + "/" + ymd[2];
                } else {
		    // TODO: should support other date formats, such as D-M-Y etc, see FromGoogle functions.
                    // For now, this writes the date as received from Yahoo: M/D/Y
                    ret = "" + items[0] + ", " + items[1] + ", " + items[2];
                }
            }
        }
        return ret;
    };
    this.toString = function () { // just here for debugging
        return this.url;
    };
}

//---------------------------------------------------------------------
// get current prices for given list of symbols. Uses Yahoo Financial API.
// This makes a single http request for all symbols at once.
function getPricesFromYahoo(symbols, numDays, outFile) {

    if (numDays > 0) {
	message("Error: Yahoo API only supports days=0 current, non-historical prices.", ERROR_LEVEL);
    }
    var error = false;

    // setup HTTP connections, with appropriate timeouts
    var WinHttpReq = new ActiveXObject("WinHttp.WinHttpRequest.5.1");
    WinHttpReq.SetTimeouts(30000, 30000, 30000, 30000);

    // setup url
    var symbols_array = []; // default, no historical data to get

    // get current prices for all symbols, and write to output file
    // Prices may be scaled (in UK, one url returns pence values, other returns pounds, for example).
    var urlcurr = new UrlCurrFromYahoo( symbols );
    message("URL=" + urlcurr, INFO_LEVEL);
    WinHttpReq.Open("GET", urlcurr.toUrl(), false);
    WinHttpReq.Send();
    if (WinHttpReq.Status == HTTP_STATUS_OK) { // 200
	message(WinHttpReq.ResponseText, DEBUG_LEVEL);
	// Was \r\n before April 2015, but that broke, so now just use \n
	var lines = WinHttpReq.ResponseText.split("\n");
	for(var i in lines) {
	    var out = urlcurr.toQuicken(lines[i]);
	    message("lines i------ " + i + " " + lines[i] + " out=" + out, DEBUG_LEVEL);
	    if (out) {
		outFile.WriteLine(out);
	    }
	}
    } else {
	error = true;
	message("Error: could not retreive latest prices for symbols="+symbols, ERROR_LEVEL);
	message("  Code " + WinHttpReq.Status + " retrieving " + urlcurr.toUrl(), ERROR_LEVEL);
    }

    return !error;
} // getPricesFromYahoo()

//---------------------------------------------------------------------
// get all input parameters
// NUMDAYS, SYMBOLS...

var argsNamed = WScript.Arguments.Named;
MESSAGE_LEVEL = getArgVal('v', argsNamed, 0); // 0,1,2,3... verbosity levels

message("TODAY = " + TODAY.toDateString(), INFO_LEVEL);

if (getArgVal('?', argsNamed, false)
        || getArgVal('h', argsNamed, false)
        || getArgVal('help', argsNamed, false))
    {
    WScript.Arguments.ShowUsage();
    WScript.Quit();
    }

// for UK processing, /div:100 and /dmy may be present
DIV_NUM = getArgVal('div', argsNamed, 0);
DATE_FORMAT = getArgVal('dmy', argsNamed, DATE_FORMAT);

// Option to exclude exchange in output (eg. LON:FDI -> FDI)
var SYMONLY = getArgVal('symonly', argsNamed, false);

// setup output file
var outFilePath = getTempDir() + "\\" + OUT_FILENAME;
message("Output file name = " + outFilePath, INFO_LEVEL);

// get symbols and other parameters
var symbols = getArgVal('s', argsNamed, SYMBOLS_DEFAULT);
var numDays = getArgVal('days', argsNamed, NUMDAYS_DEFAULT);
var automate = getArgVal('automate', argsNamed, false);

var outFile = FSO.CreateTextFile(outFilePath);

if (outFile) {
    //write first line for quicken identification
    outFile.Writeline("!Type:Prices");

    var gotPrices = false;
    if (getArgVal('yahoo', argsNamed, false)) {
        gotPrices = getPricesFromYahoo(symbols, numDays, outFile);
    } else {
        gotPrices = getPricesFromGoogle(symbols, numDays, outFile);
    }
    if (gotPrices) {
        // done with file and http
        outFile.Writeline("^");
        outFile.Close();
        if (automate) {
            message("doAutomation", DEBUG_LEVEL);
            doAutomation(outFilePath)
	}
    }
    message("QImportP: Done getting prices.", DEBUG_LEVEL);
} else {
    message("QImportP: Error creating file: " + outFilePath, ERROR_LEVEL);
}

WScript.Quit();

//---------------------------------------------------------------------
// get both historical and current prices for given list of symbols,
// depending on input args. Uses Google Financial API.
// This has to make one http request for each symbol.
function getPricesFromGoogle(symbols, numDays, outFile)
    {
    message("Start getPrices Google API", DEBUG_LEVEL);

    var error = false;

    // setup HTTP connections, with appropriate timeouts
    var WinHttpReq = new ActiveXObject("WinHttp.WinHttpRequest.5.1");
    WinHttpReq.SetTimeouts(30000, 30000, 30000, 30000)

    // setup current and hist url's
    var urlcurr = new UrlCurrFromGoogle();
    var urlhist = new UrlHistFromGoogle( numDays );

    // for each symbol, get current then historical price
    var symbols_array = [];
    symbols_array = symbols.split(",");
    for (i in symbols_array)
        {
         var sym = symbols_array[i];
         message("Info: Current Price Treatment for symbol=" + sym, INFO_LEVEL);

        // current price for sym
        var url = urlcurr.toUrl(sym);
        message("Debug: Current Price Treatment for symbol=" + sym, DEBUG_LEVEL);
        WinHttpReq.Open("GET", url, false);
        WinHttpReq.Send();
        if (WinHttpReq.Status == HTTP_STATUS_OK)
            {
             var currPrice = urlcurr.getPrice(WinHttpReq.ResponseText);
             if ( currPrice > 0 )
                 {
                 var useDate = urlcurr.getDate(WinHttpReq.ResponseText);
                 if ( useDate != "NaN" )
                    {
                    var out = urlcurr.toQuicken(currPrice, sym, useDate);
                    if (out)
                        {
                        outFile.WriteLine(out);
                        }
                    }
                 }
            // else
            //   {
            //     message("Warn: No current price for symbol "+sym,WARNING_LEVEL);
            //     }
            }
        else
            {
            //error = true;
            message("Error: could not retreive latest prices for symbol="+sym, ERROR_LEVEL);
            message("  Code " + WinHttpReq.Status + " retrieving " + urlcurr.toUrl(), ERROR_LEVEL);
            }

         // history for current sym next
         if ( numDays > 0 )
            {
            message("Info: History Price Treatment for symbol=" + sym, INFO_LEVEL);

            var url = urlhist.toUrl(sym);

            //var WinHttpReq = new ActiveXObject("WinHttp.WinHttpRequest.5.1");
            //WinHttpReq.SetTimeouts(30000, 30000, 30000, 30000)

            WinHttpReq.Open("GET", url, false);
            WinHttpReq.Send();

            if (WinHttpReq.Status == HTTP_STATUS_OK)  // response code 200
                {
                // scan to see if prices and dates can be found

                var AllPrices = [];
                var AllDates = [];
                 // arrays are passed by reference so adding values within function will really add here too!
                var ret = urlhist.getPriceDate(WinHttpReq.ResponseText,AllPrices,AllDates);
                if (ret)
                    {
                    // both arrays have equal length
                    for (i=0; i < AllPrices.length;i++)
                        {
                        var out=urlhist.toQuicken(AllDates[i],AllPrices[i],sym);
                        if (out)
                            {
                            outFile.WriteLine(out);
                            }
                        }
                    }
                }
            else
                {
                // error, could not retrieve page
                // some errors may be fine - if start date is recent and no
                // closing prices exist for that symbol from that date
                //
                 message("Error: could not retreive historical prices for symbol=" + sym, ERROR_LEVEL);
                 message("  Code " + WinHttpReq.Status + " retrieving " + url, ERROR_LEVEL);
                }
            }
        }


    return !error;
    } // getPricesFromGoogle()

//---------------------------------------------------------------------
// Windows automation - start Quicken application, and when it is
// open (after user enters any password, etc), run the Import command
// Quicken does not have Automation capabilities, so have to use
// SendKeys. This is not a very reliable method, depends a lot on timing
// and position of windows on screen, etc. Still, should work most of the
// time.
// TODO - not very reliable using scripting language?
// this is better coded in something like C#, which has access
// to functions like FindWindow and can better ensure sendkeys is going
// to the right window.
// But in practice, this works just fine, even on Windows 10.

function doAutomation(outFilePath) {
    // check if Quicken is already up
    var foundApp = appActivate(QTITLE, 2); // check each second, for these many times
    if (!foundApp) {
       // try starting Quicken. this may not be very reliable, and since
       // Quicken may be password protected, there is not much value
       // in starting Quicken here. Better to run Quicken first, and then
       // run this automation to just import the prices.
        var qexe = '';
        for (var i in QEXE_DEFAULT) {
            qexe = WSH.ExpandEnvironmentStrings(QEXE_DEFAULT[i]);
            // (FSO.FileExists(qexe)) - this check not necessary, just call Run
            // Run will start application, or do nothing if app is already running
            try {
                WSH.Run('"' + qexe + '"', 1, false); // true to wait here, false to continue in this script
            } catch (e) {
                // ignore errors from Run, keep trying
                message("automation: could not run Quicken at [" + qexe + "] " + e.description, DEBUG_LEVEL);
                qexe = '';
            }
            if (qexe) {
                // Run had no error, we can exit loop
                break;
            }
        }
        if (!qexe) {
            message("Error: 1: Unable to run Quicken application - may be better to run Quicken first, and then this script", ERROR_LEVEL);
            return false;
        }
        message("automation: started Quicken using: " + qexe, INFO_LEVEL);
        // check if window is up - check a few times, allowing time for app to be up.
        foundApp = appActivate(QTITLE, 20); // check each second, for these many times
    }

    // if password window is displayed, this automation is unlikely to
    // work since timing it is hard/not possible all the time
    // in that case, users should first start Quicken, enter password,
    // and then run this script. It is not possible to pick appropriate
    // number of seconds for this case - don't want to wait 20 secs
    // all the time!
    // WScript.Sleep(20000); // allow for possible password entry? 20 secs!
    if (foundApp) {
        // open portfolio - one of two ways - ^u (not ^U) or %i p
        // alt-i is bad - brings up find menu in register view, so use ^u
        // appSendKeys("%i", QTITLE); // open Investing Menu
        // appSendKeys("p", QTITLE); // select Portfolio command
        appSendKeys("^u", QTITLE); // go to Portfolio window

        appSendKeys("%f", QTITLE); // open file menu
        appSendKeys("i", QTITLE);  // select Import command
        appSendKeys("i", QTITLE);  // select Import Prices command
        // this brings up the "Import Price Data" dialog box
        escapedPath = escapeSendKeys(outFilePath);
        appSendKeys(escapedPath, QTITLE); // enter file name
        appSendKeys("{ENTER}", QTITLE);   // send file name
        // final OK - this should be sent only after file has been loaded,
        // otherwise it will cause the Cancel button to be clicked!
        // let user click OK, so they can see number of prices imported
        // therefore line below may be commented.
        //appSendKeys("{ENTER}", QTITLE);   // click OK on successful import box
    } else {
        message("Error: 2: Unable to activate Quicken application - not sending keys", ERROR_LEVEL);
        return false;
    }
    return true;
} // doAutomation()

//---------------------------------------------------------------------
// Utility Functions

//---------------------------------------------------------------------
function appActivate(title, numtimes) {
    var foundApp = false;
    --numtimes;
    for (var i = 0; i <= numtimes && !foundApp; ++i) { // check each second, for these many times
        foundApp = WSH.AppActivate(title);
        if (foundApp || (i >= numtimes)) break;
        WScript.Sleep(1000);
    }
    return foundApp;
}

//---------------------------------------------------------------------
function appSendKeys(keys, title) {
    message("SendKeys " + keys, DEBUG_LEVEL);
    if (appActivate(title, 2)) {
        WSH.SendKeys(keys);
        WScript.Sleep(1000);
    } else {
        message("Error: could not send keys" + keys, ERROR_LEVEL);
    }
}

//---------------------------------------------------------------------
function escapeSendKeys(str) {
    var out = str;
    out = out.replace(/{/g, "{{}");
    out = out.replace(/~/g, "{~}");
    out = out.replace(/!/g, "{!}");
    out = out.replace(/\^/g, "{^}");
    out = out.replace(/\+/g, "{+}");
    out = out.replace(/ /g, "{SPACE}");
    out = out.replace(/\t/g, "{TAB}");
    if (out != str) {
        message("Escape SendKeys new string" + out, DEBUG_LEVEL);
    }
    return out;
}

//---------------------------------------------------------------------
// check if given argument is present in the args list,
// return true if yes, otherwise return the default value
// if arg has a = following name, then return the value instead
// value provided after = character
function getArgVal(what, args, defVal) {
    var val = defVal; // if not found
    var re = new RegExp("^\/" + what, "i");
    var exists = args.exists(what);
    if (exists) {
        val = true;
        var item = args.item(what);
        if (item) {
            val = item;
        }
    }
    message("getArgVal:  what=" + what + "  val=" + val, DEBUG_LEVEL);
    return val;
}

//---------------------------------------------------------------------
function getTempDir() {
    var t = WSH.ExpandEnvironmentStrings("%TMP%");
    if (!t) t = WSH.ExpandEnvironmentStrings("%TEMP%");
    if (!t) t = 'C:\\WINDOWS\\TEMP';

    return t;
}

//---------------------------------------------------------------------
// truncate given number to 2 chars, or prefix with 0 to make it 2 chars
function trunc2(n) {
    var nn = "0"+n;
    return nn.slice(-2);

}

//---------------------------------------------------------------------
// print given message if its level is <= MESSAGE_LEVEL setting
// level 0 will always print, 1 will print if DEBUG is 0 or 1, etc
function message(str, level) {
    if (level == 0 || level <= MESSAGE_LEVEL)
        WScript.Echo(str);
}
//---------------------------------------------------------------------
]]>
</script>
</job>
//---------------------------------------------------------------------
<job id="Setup">
<?job error="true"  debug="true"?>
<runtime>
    <description>This is used to Install and Setup the QImportP script.
    TODO
    </description>
    <example>   Example: cscript QImportP.wsf /job:Setup"</example>
</runtime>
<script language="VBScript">
<![CDATA[
'
' SETUP for wsh QImportP jscript/vbscript code
' TODO
'
]]>
</script>
</job>
//---------------------------------------------------------------------
</package>
